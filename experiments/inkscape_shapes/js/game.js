var game = new Phaser.Game(800, 600, Phaser.AUTO, 'gameContainer', { preload: preload, create: create, update: update, render: render });
var inkscapeExport = false;
function preload() {
    game.time.advancedTiming = true; 
}



function create() {
    game.stage.backgroundColor = '#FFFFFF';

    var bmd = game.make.bitmapData(1000, 1000);
    bmd.ctx.beginPath();
    bmd.ctx.lineJoin = 'miter';
    bmd.ctx.strokeStyle = 'rgb(0, 0, 0)';
    bmd.ctx.lineCap = 'butt';
    bmd.ctx.lineWidth = 1.000000;
    bmd.ctx.fillStyle = 'rgb(255, 0, 0)';
    bmd.ctx.moveTo(268.571440, 363.790770);
    bmd.ctx.bezierCurveTo(331.689695, 363.790770, 382.857150, 408.562295, 382.857150, 463.790770);
    bmd.ctx.bezierCurveTo(382.857150, 519.019245, 331.689695, 563.790770, 268.571440, 563.790770);
    bmd.ctx.bezierCurveTo(205.453185, 563.790770, 154.285730, 519.019245, 154.285730, 463.790770);
    bmd.ctx.bezierCurveTo(154.285730, 408.562295, 205.453185, 363.790770, 268.571440, 363.790770);
    bmd.ctx.fill();
    bmd.ctx.stroke();
    game.add.sprite(1, 1, bmd);
    
// #path3338
    var bmd = game.make.bitmapData(1000, 1000);
    bmd.ctx.beginPath();
    bmd.ctx.lineJoin = 'miter';
    bmd.ctx.strokeStyle = 'rgb(0, 0, 0)';
    bmd.ctx.lineCap = 'butt';
    bmd.ctx.lineWidth = 1.000000;
    bmd.ctx.moveTo(65.714286, 406.647920);
    bmd.ctx.bezierCurveTo(65.714286, 416.171730, 65.714286, 425.695540, 65.714286, 435.219350);
    bmd.ctx.bezierCurveTo(65.714286, 438.076490, 64.436533, 441.235270, 65.714286, 443.790780);
    bmd.ctx.bezierCurveTo(66.140203, 444.642610, 67.897994, 443.117340, 68.571429, 443.790780);
    bmd.ctx.bezierCurveTo(69.918299, 445.137650, 67.719593, 447.801390, 68.571429, 449.505060);
    bmd.ctx.bezierCurveTo(69.173767, 450.709740, 70.826233, 451.157530, 71.428571, 452.362200);
    bmd.ctx.bezierCurveTo(72.326460, 454.157980, 70.530683, 461.995000, 71.428571, 463.790780);
    bmd.ctx.bezierCurveTo(72.030910, 464.995450, 73.683376, 465.443240, 74.285714, 466.647920);
    bmd.ctx.bezierCurveTo(75.097386, 468.271260, 73.549507, 482.686470, 74.285714, 483.790780);
    bmd.ctx.bezierCurveTo(75.466997, 485.562700, 78.494153, 485.142070, 80.000000, 486.647920);
    bmd.ctx.bezierCurveTo(80.673435, 487.321350, 79.574082, 488.653230, 80.000000, 489.505060);
    bmd.ctx.bezierCurveTo(80.602339, 490.709740, 82.254804, 491.157530, 82.857143, 492.362200);
    bmd.ctx.bezierCurveTo(83.843905, 494.335730, 81.854230, 505.645010, 82.857143, 506.647920);
    bmd.ctx.bezierCurveTo(83.530578, 507.321350, 85.040851, 505.974480, 85.714286, 506.647920);
    bmd.ctx.bezierCurveTo(85.716986, 506.650920, 85.709986, 515.206400, 85.714286, 515.219350);
    bmd.ctx.bezierCurveTo(86.140203, 516.497100, 87.969090, 516.871810, 88.571429, 518.076490);
    bmd.ctx.bezierCurveTo(89.408393, 519.750420, 88.045073, 530.256780, 88.571429, 532.362200);
    bmd.ctx.bezierCurveTo(83.397559, 544.315810, 93.081037, 535.667140, 94.285714, 538.076490);
    bmd.ctx.bezierCurveTo(95.137550, 539.780160, 94.285714, 541.886010, 94.285714, 543.790780);
    bmd.ctx.bezierCurveTo(94.285714, 547.146890, 93.802023, 559.482560, 94.285714, 560.933630);
    bmd.ctx.bezierCurveTo(94.888053, 562.740650, 99.148165, 559.229960, 100.000000, 560.933630);
    bmd.ctx.bezierCurveTo(100.851840, 562.637300, 100.000000, 564.743160, 100.000000, 566.647920);
    bmd.ctx.bezierCurveTo(100.000000, 567.600300, 99.326565, 568.831630, 100.000000, 569.505060);
    bmd.ctx.bezierCurveTo(103.809520, 573.314590, 102.857140, 564.743160, 102.857140, 572.362200);
    bmd.ctx.bezierCurveTo(102.857140, 575.219350, 102.857140, 578.076490, 102.857140, 580.933630);
    bmd.ctx.bezierCurveTo(102.857140, 581.886010, 102.183710, 583.117340, 102.857140, 583.790780);
    bmd.ctx.bezierCurveTo(103.530580, 584.464210, 104.761900, 583.790780, 105.714290, 583.790780);
    bmd.ctx.bezierCurveTo(106.666670, 583.790780, 107.897990, 583.117340, 108.571430, 583.790780);
    bmd.ctx.bezierCurveTo(109.244860, 584.464210, 107.897990, 585.974480, 108.571430, 586.647920);
    bmd.ctx.bezierCurveTo(109.244860, 587.321350, 110.576740, 586.222000, 111.428570, 586.647920);
    bmd.ctx.bezierCurveTo(112.633250, 587.250260, 113.333330, 588.552680, 114.285710, 589.505060);
    bmd.ctx.bezierCurveTo(115.966130, 591.185470, 124.391200, 600.272090, 125.714290, 600.933630);
    bmd.ctx.bezierCurveTo(127.264250, 601.708620, 136.361080, 600.151860, 137.142860, 600.933630);
    bmd.ctx.bezierCurveTo(137.816290, 601.607070, 136.469420, 603.117340, 137.142860, 603.790780);
    bmd.ctx.bezierCurveTo(138.489730, 605.137650, 141.153470, 602.938940, 142.857140, 603.790780);
    bmd.ctx.bezierCurveTo(144.061820, 604.393110, 144.509610, 606.045580, 145.714290, 606.647920);
    bmd.ctx.bezierCurveTo(147.264250, 607.422900, 156.361080, 605.866140, 157.142860, 606.647920);
    bmd.ctx.bezierCurveTo(157.816290, 607.321350, 156.291020, 609.079140, 157.142860, 609.505060);
    bmd.ctx.bezierCurveTo(158.991290, 610.429280, 167.545100, 608.478730, 168.571430, 609.505060);
    bmd.ctx.bezierCurveTo(169.244860, 610.178500, 167.897990, 611.688770, 168.571430, 612.362200);
    bmd.ctx.bezierCurveTo(172.380950, 616.171730, 171.428570, 607.600300, 171.428570, 615.219350);
    bmd.ctx.stroke();
    game.add.sprite(1, 1, bmd);
    
// #path3340
    var bmd = game.make.bitmapData(1000, 1000);
    bmd.ctx.beginPath();
    bmd.ctx.lineJoin = 'miter';
    bmd.ctx.strokeStyle = 'rgb(0, 0, 0)';
    bmd.ctx.lineCap = 'butt';
    bmd.ctx.lineWidth = 1.000000;
    bmd.ctx.moveTo(222.857140, 626.647920);
    bmd.ctx.bezierCurveTo(259.047620, 626.647920, 295.238100, 626.647920, 331.428570, 626.647920);
    bmd.ctx.bezierCurveTo(338.095240, 626.647920, 344.761900, 626.647920, 351.428570, 626.647920);
    bmd.ctx.bezierCurveTo(353.333330, 626.647920, 355.238100, 626.647920, 357.142860, 626.647920);
    bmd.ctx.bezierCurveTo(358.095240, 626.647920, 359.148160, 627.073840, 360.000000, 626.647920);
    bmd.ctx.bezierCurveTo(361.204680, 626.045580, 361.904760, 624.743160, 362.857140, 623.790780);
    bmd.ctx.bezierCurveTo(364.761900, 623.790780, 366.764410, 624.393110, 368.571430, 623.790780);
    bmd.ctx.bezierCurveTo(369.849180, 623.364860, 370.150820, 621.359550, 371.428570, 620.933630);
    bmd.ctx.bezierCurveTo(373.235590, 620.331290, 375.335840, 621.535970, 377.142860, 620.933630);
    bmd.ctx.bezierCurveTo(378.420610, 620.507720, 379.047620, 619.028870, 380.000000, 618.076490);
    bmd.ctx.bezierCurveTo(382.857140, 615.219350, 385.338940, 611.929430, 388.571430, 609.505060);
    bmd.ctx.bezierCurveTo(401.713320, 599.648640, 385.570710, 615.315070, 402.857140, 603.790780);
    bmd.ctx.bezierCurveTo(403.649570, 603.262490, 402.064710, 601.461920, 402.857140, 600.933630);
    bmd.ctx.bezierCurveTo(431.284990, 591.457680, 397.469660, 604.974240, 414.285710, 592.362200);
    bmd.ctx.bezierCurveTo(416.695070, 590.555190, 420.505410, 591.386450, 422.857140, 589.505060);
    bmd.ctx.bezierCurveTo(425.538540, 587.359950, 426.511110, 583.680720, 428.571430, 580.933630);
    bmd.ctx.bezierCurveTo(430.946710, 577.766590, 434.949240, 575.652630, 437.142860, 572.362200);
    bmd.ctx.bezierCurveTo(438.324140, 570.590280, 438.904340, 568.474030, 440.000000, 566.647920);
    bmd.ctx.bezierCurveTo(441.766710, 563.703410, 444.438980, 561.264750, 445.714290, 558.076490);
    bmd.ctx.bezierCurveTo(446.421700, 556.307960, 444.657710, 553.947060, 445.714290, 552.362200);
    bmd.ctx.bezierCurveTo(446.895570, 550.590280, 449.922720, 551.010910, 451.428570, 549.505060);
    bmd.ctx.bezierCurveTo(452.335390, 548.598240, 459.455740, 533.994980, 460.000000, 532.362200);
    bmd.ctx.bezierCurveTo(460.301170, 531.458700, 459.428570, 530.266970, 460.000000, 529.505060);
    bmd.ctx.bezierCurveTo(462.424370, 526.272570, 466.147060, 524.166120, 468.571430, 520.933630);
    bmd.ctx.bezierCurveTo(469.142860, 520.171730, 468.145510, 518.928330, 468.571430, 518.076490);
    bmd.ctx.bezierCurveTo(470.953060, 513.313220, 474.285710, 516.785520, 474.285710, 509.505060);
    bmd.ctx.bezierCurveTo(474.285710, 508.552680, 474.285710, 507.600300, 474.285710, 506.647920);
    bmd.ctx.bezierCurveTo(474.285710, 505.695540, 473.333330, 503.790780, 474.285710, 503.790780);
    bmd.ctx.bezierCurveTo(475.238100, 503.790780, 474.285710, 505.695540, 474.285710, 506.647920);
    bmd.ctx.stroke();
    game.add.sprite(1, 1, bmd);
    
// #path3342
    var bmd = game.make.bitmapData(1000, 1000);
    bmd.ctx.beginPath();
    bmd.ctx.lineJoin = 'miter';
    bmd.ctx.strokeStyle = 'rgb(0, 0, 0)';
    bmd.ctx.lineCap = 'butt';
    bmd.ctx.lineWidth = 1.000000;
    bmd.ctx.moveTo(131.428570, 255.219350);
    bmd.ctx.bezierCurveTo(135.640280, 252.060570, 142.587350, 245.785470, 148.571430, 243.790780);
    bmd.ctx.bezierCurveTo(149.474940, 243.489610, 150.504630, 244.021760, 151.428570, 243.790780);
    bmd.ctx.bezierCurveTo(154.350340, 243.060330, 157.078230, 241.664080, 160.000000, 240.933630);
    bmd.ctx.bezierCurveTo(162.771840, 240.240670, 165.799590, 241.626590, 168.571430, 240.933630);
    bmd.ctx.bezierCurveTo(170.637430, 240.417130, 172.219710, 238.592990, 174.285710, 238.076490);
    bmd.ctx.bezierCurveTo(177.981500, 237.152550, 182.018500, 239.000440, 185.714290, 238.076490);
    bmd.ctx.bezierCurveTo(189.846290, 237.043490, 192.966390, 233.197500, 197.142860, 232.362200);
    bmd.ctx.bezierCurveTo(199.944520, 231.801870, 202.857140, 232.362200, 205.714290, 232.362200);
    bmd.ctx.bezierCurveTo(212.380950, 232.362200, 219.047620, 232.362200, 225.714290, 232.362200);
    bmd.ctx.bezierCurveTo(240.952380, 232.362200, 256.190480, 232.362200, 271.428570, 232.362200);
    bmd.ctx.bezierCurveTo(281.904760, 232.362200, 292.380950, 232.362200, 302.857140, 232.362200);
    bmd.ctx.bezierCurveTo(305.714290, 232.362200, 308.571430, 232.362200, 311.428570, 232.362200);
    bmd.ctx.bezierCurveTo(314.285710, 232.362200, 317.289480, 231.458700, 320.000000, 232.362200);
    bmd.ctx.bezierCurveTo(323.257640, 233.448090, 325.500090, 236.540820, 328.571430, 238.076490);
    bmd.ctx.bezierCurveTo(331.265170, 239.423360, 334.560350, 239.384130, 337.142860, 240.933630);
    bmd.ctx.bezierCurveTo(339.452720, 242.319550, 340.753690, 244.965150, 342.857140, 246.647920);
    bmd.ctx.bezierCurveTo(345.538540, 248.793030, 348.747180, 250.217090, 351.428570, 252.362200);
    bmd.ctx.bezierCurveTo(353.532030, 254.044970, 354.987870, 256.460250, 357.142860, 258.076490);
    bmd.ctx.bezierCurveTo(358.846530, 259.354240, 361.153470, 259.655880, 362.857140, 260.933630);
    bmd.ctx.bezierCurveTo(365.012130, 262.549880, 366.666670, 264.743160, 368.571430, 266.647920);
    bmd.ctx.bezierCurveTo(370.476190, 268.552680, 372.380950, 270.457440, 374.285710, 272.362200);
    bmd.ctx.bezierCurveTo(377.142860, 275.219350, 380.432780, 277.701150, 382.857140, 280.933630);
    bmd.ctx.bezierCurveTo(384.134900, 282.637300, 383.942360, 285.466640, 385.714290, 286.647920);
    bmd.ctx.bezierCurveTo(387.299140, 287.704490, 389.843710, 285.591350, 391.428570, 286.647920);
    bmd.ctx.bezierCurveTo(393.200500, 287.829200, 393.007960, 290.658530, 394.285710, 292.362200);
    bmd.ctx.bezierCurveTo(395.901960, 294.517200, 398.383760, 295.921500, 400.000000, 298.076490);
    bmd.ctx.bezierCurveTo(401.277750, 299.780160, 401.579390, 302.087110, 402.857140, 303.790780);
    bmd.ctx.bezierCurveTo(404.473390, 305.945770, 407.366750, 307.095710, 408.571430, 309.505060);
    bmd.ctx.bezierCurveTo(409.423260, 311.208730, 407.514860, 313.634490, 408.571430, 315.219350);
    bmd.ctx.bezierCurveTo(409.752710, 316.991270, 412.779870, 316.570640, 414.285710, 318.076490);
    bmd.ctx.bezierCurveTo(415.791560, 319.582340, 415.865100, 322.087110, 417.142860, 323.790780);
    bmd.ctx.bezierCurveTo(418.759100, 325.945770, 421.240900, 327.350070, 422.857140, 329.505060);
    bmd.ctx.bezierCurveTo(429.001400, 331.806220, 423.536110, 337.666370, 425.714290, 340.933630);
    bmd.ctx.bezierCurveTo(426.895570, 342.705560, 430.247290, 342.018850, 431.428570, 343.790780);
    bmd.ctx.bezierCurveTo(432.485140, 345.375630, 430.576740, 347.801390, 431.428570, 349.505060);
    bmd.ctx.bezierCurveTo(431.854490, 350.356900, 433.433880, 349.079140, 434.285710, 349.505060);
    bmd.ctx.bezierCurveTo(438.251550, 351.487980, 437.142860, 354.588830, 437.142860, 358.076490);
    bmd.ctx.stroke();
    game.add.sprite(1, 1, bmd);
    
// #rect3363
    var bmd = game.make.bitmapData(1000, 1000);
    bmd.ctx.beginPath();
    bmd.ctx.lineJoin = 'miter';
    bmd.ctx.strokeStyle = 'rgb(0, 0, 0)';
    bmd.ctx.lineCap = 'butt';
    bmd.ctx.lineWidth = 1.000000;
    bmd.ctx.fillStyle = 'rgb(0, 0, 255)';
    bmd.ctx.rect(74.285713, 292.362210, 122.857140, 102.857140);
    bmd.ctx.fill();
    bmd.ctx.stroke();
    game.add.sprite(1, 1, bmd);

// #path3365
    var bmd = game.make.bitmapData(500, 500);
    bmd.ctx.beginPath();
    bmd.ctx.lineJoin = 'miter';
    bmd.ctx.strokeStyle = 'rgb(0, 0, 0)';
    bmd.ctx.lineCap = 'butt';
    bmd.ctx.lineWidth = 1.000000;
    bmd.ctx.fillStyle = 'rgb(255, 255, 0)';
    bmd.ctx.moveTo(488.571440, 472.362190);
    bmd.ctx.lineTo(453.835770, 461.999640);
    bmd.ctx.lineTo(425.607170, 484.739360);
    bmd.ctx.lineTo(424.728620, 448.501570);
    bmd.ctx.lineTo(394.378740, 428.681540);
    bmd.ctx.lineTo(428.571440, 416.647900);
    bmd.ctx.lineTo(438.042790, 381.658720);
    bmd.ctx.lineTo(460.053580, 410.459310);
    bmd.ctx.lineTo(496.257080, 408.654840);
    bmd.ctx.lineTo(475.667790, 438.488230);
    bmd.ctx.fill();
    bmd.ctx.stroke();

    inkscapeExport = game.add.sprite(400, 300, bmd);
    inkscapeExport.anchor.setTo(0.5, 0.5);

}

function update() {
    inkscapeExport.angle += 2;
}

function render() {
	game.debug.text('FPS: ' + game.time.fps, 2, 14, "#00ff00");
}